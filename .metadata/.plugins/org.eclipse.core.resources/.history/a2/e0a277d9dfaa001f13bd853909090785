package com.example.demo.repository.jpa;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.TemporalAdjusters;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Service;

import com.example.demo.entity.Account;

public interface AccountRepository extends JpaRepository<Account, Long> {

    Optional<Account> findByEmail(String email);

    List<Account> findByIsDeletedFalse();  // 引数なしで削除されていないアカウントを取得

    Page<Account> findByIsDeletedFalse(Pageable pageable);

    List<Account> findByIsDeletedTrue();

    // ROLE_USERのアカウントのみ取得するメソッド
    List<Account> findByIsDeletedFalseAndRole(String role);

 // // 月ごとのいいねランキングを取得するクエリ
    @Service
    public class LikeService {

        @Autowired
        private AccountRepository accountRepository;

        // アカウントのいいね数を1増加させる
        public int likeAccount(Long accountId) {
            Account account = accountRepository.findById(accountId).orElse(null);
            if (account != null) {
                int currentLikes = account.getLikes();
                account.setLikes(currentLikes + 1);
                accountRepository.save(account);
                System.out.println("Updated likes for account ID: " + accountId + " to " + (currentLikes + 1));
                return account.getLikes(); // 更新後のいいね数を返す
            } else {
                throw new RuntimeException("Account not found with ID: " + accountId);
            }
        }

        // 管理者を除外した月ごとのいいねランキング
        public List<Account> findTopLikedAccountsForMonth(LocalDateTime startOfMonth, LocalDateTime endOfMonth) {
            return accountRepository.findTopLikedAccountsExcludingAdminsForMonth(startOfMonth, endOfMonth);
        }

        // 管理者を除外した年間のいいねランキング
        public List<Account> findTopLikedAccountsForPeriod(LocalDateTime startOfYear, LocalDateTime endOfYear) {
            return accountRepository.findTopLikedAccountsExcludingAdminsForPeriod(startOfYear, endOfYear);
        }

        public int getLikesForYear(Long userId, int year) {
            LocalDate startOfYear = LocalDate.of(year, 1, 1);
            LocalDateTime startOfYearDateTime = startOfYear.atStartOfDay();
            LocalDateTime endOfYearDateTime = startOfYear.withMonth(12).withDayOfMonth(31).atTime(23, 59, 59);

            List<Account> accounts = accountRepository.findLikesByUserAndPeriod(userId, startOfYearDateTime, endOfYearDateTime);
            return accounts.stream().mapToInt(Account::getLikes).sum();
        }

        public int getLikesForMonth(Long userId, int year, int month) {
            LocalDate startOfMonth = LocalDate.of(year, month, 1);
            LocalDateTime startOfMonthDateTime = startOfMonth.atStartOfDay();
            LocalDateTime endOfMonthDateTime = startOfMonth.with(TemporalAdjusters.lastDayOfMonth()).atTime(23, 59, 59);

            List<Account> accounts = accountRepository.findLikesByUserAndPeriod(userId, startOfMonthDateTime, endOfMonthDateTime);
            return accounts.stream().mapToInt(Account::getLikes).sum();
        }
    }

    
    @Query("SELECT a FROM Account a WHERE a.id = :userId AND a.isDeleted = false AND a.createdDate BETWEEN :startDate AND :endDate")
    List<Account> findLikesByUserAndPeriod(@Param("userId") Long userId, @Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

}
