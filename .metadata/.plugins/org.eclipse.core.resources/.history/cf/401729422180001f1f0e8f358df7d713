package com.example.demo.config;

import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.demo.constant.UlrConst;

@EnableWebSecurity
@Configuration
public class WebSecurityConfig {

    private final MessageSource messageSource;
    
    private final String USERNAME_PARAMETER = "loginId";

    // PasswordEncoderをBeanとして定義
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // パスワードをBCryptでエンコード
    }

    // SecurityFilterChainを定義
    @Bean
    SecurityFilterChain securityFirterChain(HttpSecurity http) throws Exception {

        http
            .authorizeHttpRequests(
                authorize -> authorize.requestMatchers(UlrConst.NO_AUTHENTICATION).permitAll()
                    .anyRequest().authenticated())
            .formLogin(
                login -> login.loginPage(UlrConst.LOGIN)
                    .usernameParameter(USERNAME_PARAMETER)
                    .defaultSuccessUrl(UlrConst.MENU));

        return http.build();
    }

    // DaoAuthenticationProviderの設定
    @Bean
    AuthenticationProvider daoAuthenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder);
        provider.setMessageSource(messageSource);
        return provider;
    }
}
