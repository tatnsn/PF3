<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>月のいいねランキング</title>

    <!-- CSRFトークンを取得 -->
    <script>
        var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    </script>
</head>
<body>
    <h1>月のいいねランキング</h1>

    <!-- 月選択フォーム（同期的にページ遷移） -->
    <div>
        <form id="month-form" action="/public/monthly-likes" method="get">
            <label for="month">月を選択：</label>
            <input type="number" id="month" name="month" min="1" max="12" value="1">
            <button type="submit">表示</button>
        </form>
    </div>

    <!-- アカウントランキングリスト -->
    <ul id="account-list">
        <!-- 初期のアカウント情報を表示 -->
        <th:block th:each="account : ${accounts}">
            <li>
                <img th:src="${account.profileImage}" alt="プロフィール画像" width="50" height="50"/>
                <span th:text="${account.name}">アカウント名</span>
                <button th:attr="data-account-id=${account.id}" onclick="likeAccount(this)">
                    ❤️ いいね (<span id="likes-[[${account.id}]]" th:text="${account.likes}">0</span>)
                </button>
            </li>
        </th:block>
    </ul>

    <script>
        // いいねボタンの非同期処理
        function likeAccount(buttonElement) {
            const accountId = buttonElement.getAttribute("data-account-id");
            const url = `/public/account/${accountId}/like`;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': csrfToken
                }
            })
            .then(response => response.text())
            .then(result => {
                if (result !== 'error') {
                    // 受け取った新しい「いいね」数を表示
                    const likesElement = document.getElementById(`likes-${accountId}`);
                    likesElement.textContent = result; // 新しい「いいね数」を更新
                } else {
                    alert("エラーが発生しました。もう一度お試しください。");
                }
            })
            .catch(error => console.error("Error:", error));
        }

        // 月選択フォームの送信後、ランキングリストを非同期で更新
        document.getElementById("month-form").addEventListener("submit", function(event) {
            event.preventDefault();
            const month = document.getElementById("month").value;
            fetch(`/public/monthly-likes/${month}`, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(accounts => {
                const accountListElement = document.getElementById('account-list');
                accountListElement.innerHTML = ''; // 現在のリストをクリア

                accounts.forEach(account => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <a href="/public/account/${account.id}">
                            <img src="${account.profileImage}" alt="プロフィール画像" width="50" height="50"/>
                            <span>${account.name}</span>
                        </a>
                        <button data-account-id="${account.id}" onclick="likeAccount(this)">
                            ❤️ いいね (<span id="likes-${account.id}">${account.likes}</span>)
                        </button>
                    `;
                    accountListElement.appendChild(listItem);
                });
            })
            .catch(error => console.error('Error fetching account list:', error));
        });
    </script>
</body>
</html>
