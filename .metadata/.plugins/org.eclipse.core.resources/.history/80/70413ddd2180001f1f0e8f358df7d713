package com.example.demo.config;

import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.demo.constant.UlrConst;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
	
	private final UserDetailsService userDetailsService;
	private final MessageSource messageSource;
	
	private final String USERNAME_PARAMETER = "loginId";
	
	// PasswordEncoderを@Beanとして定義（フィールド注入は削除）
	@Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(); // パスワードをBCryptでエンコード
    }
	
	// SecurityFilterChainの定義にAuthenticationProviderを注入
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity http, AuthenticationProvider authenticationProvider) throws Exception {

		http
		.authenticationProvider(authenticationProvider) // AuthenticationProviderを設定
		.authorizeHttpRequests(
				authorize -> authorize.requestMatchers(UlrConst.NO_AUTHENTICATION).permitAll()
					.anyRequest().authenticated())
		.formLogin(
				login -> login.loginPage(UlrConst.LOGIN)
				.usernameParameter(USERNAME_PARAMETER)
				.defaultSuccessUrl(UlrConst.MENU));
		
		return http.build();
	}
	
	// AuthenticationProviderを@Beanとして定義し、PasswordEncoderをメソッドパラメータとして注入
	@Bean
	AuthenticationProvider daoAuthenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder, MessageSource messageSource) {
		DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
		provider.setUserDetailsService(userDetailsService);
		provider.setPasswordEncoder(passwordEncoder);
		provider.setMessageSource(messageSource);
		
		return provider;
	}
}
