package com.example.demo.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.entity.Account;
import com.example.demo.repository.jpa.AccountRepository;
import com.example.demo.service.LikeService;

@Controller
@RequestMapping("/public")
public class PublicAccountController {

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private LikeService likeService;

    // 一般アカウント紹介一覧
    @GetMapping("/account-list")
    public String showAccountList(Model model) {
        List<Account> accounts = accountRepository.findByIsDeletedFalseAndRole("ROLE_USER");
        model.addAttribute("accounts", accounts);
        return "public/accountList";
    }



    // 一般アカウント詳細
    @GetMapping("/account/{id}")
    public String showAccountDetail(@PathVariable Long id, Model model) {
        Account account = accountRepository.findById(id).orElse(null);
        model.addAttribute("account", account);
        return "public/accountDetail";
    }

 // 非同期いいね機能
    @PostMapping("/account/{id}/like")
    @ResponseBody
    public String likeAccount(@PathVariable Long id) {
        try {
            // アカウントの取得
            Account account = accountRepository.findById(id).orElse(null);
            if (account == null) {
                return "error: Account not found";  // アカウントが見つからない場合
            }

            // いいね数を増加させる
            account.setLikes(account.getLikes() + 1);

            // 更新後のアカウントを保存
            accountRepository.save(account);

            // 更新したいいね数を返す
            return String.valueOf(account.getLikes());
        } catch (Exception e) {
            e.printStackTrace();
            return "error: " + e.getMessage();  // エラーメッセージを返す
        }
    }





 // アカウント詳細をJSON形式で取得するAPIエンドポイント
 
    @GetMapping("/account/{id}/details")
    @ResponseBody
    public ResponseEntity<Account> getAccountDetails(@PathVariable Long id) {
        Account account = accountRepository.findById(id).orElse(null);
        
        if (account == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // 404 Not Found
        }
        
        return ResponseEntity.ok(account); // 200 OK と共にアカウント情報を返す
    }



    // アカウント一覧をJSON形式で取得するAPIエンドポイント
    @GetMapping("/account/list")
    @ResponseBody
    public List<Account> getAllAccounts() {
        return accountRepository.findByIsDeletedFalseAndRole("ROLE_USER");
    }
    @GetMapping("/monthly-likes")
    public String showMonthlyLikes(Model model, @RequestParam(value = "month", defaultValue = "1") int month) {
        // 月の範囲をチェック
        if (month < 1 || month > 12) {
            model.addAttribute("error", "無効な月の指定です。1から12の間の月を指定してください。");
            return "error"; // エラーページへの遷移
        }

        // 月の開始日と終了日をLocalDateTimeで設定
        LocalDate startOfMonth = LocalDate.of(LocalDate.now().getYear(), month, 1); // 月の初日
        LocalDateTime startOfMonthDateTime = startOfMonth.atStartOfDay(); // 00:00時点のLocalDateTime

        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth()); // 月の最終日
        LocalDateTime endOfMonthDateTime = endOfMonth.atTime(23, 59, 59, 999999999); // 23:59:59のLocalDateTime

        // トップいいねアカウントを取得
        List<Account> topLikedAccounts = likeService.findTopLikedAccountsForMonth(startOfMonthDateTime, endOfMonthDateTime);

        // アカウントデータが取得できなかった場合、空リストを返す
        if (topLikedAccounts == null || topLikedAccounts.isEmpty()) {
            model.addAttribute("error", "指定した月のデータが見つかりませんでした。");
            return "error"; // エラーページへの遷移
        }

        // モデルにアカウント情報と月を追加
        model.addAttribute("accounts", topLikedAccounts);
        model.addAttribute("month", month);

        // 月ごとのランキングページを返す
        return "public/monthlyLikes"; // public/monthlyLikes.htmlを返す
    }
}
