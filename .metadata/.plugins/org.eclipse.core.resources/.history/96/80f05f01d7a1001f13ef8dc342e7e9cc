package com.example.demo.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.entity.Account;
import com.example.demo.service.LikeService;

@Controller
@RequestMapping("/public/ranking")
public class RankingController {

    @Autowired
    private LikeService likeService;

    // 月ごとのいいねランキングの表示
    @GetMapping
    public String showMonthlyLikes(Model model, @RequestParam(value = "month", defaultValue = "1") int month) {
        if (month < 1 || month > 12) {
            model.addAttribute("error", "無効な月の指定です。1から12の間の月を指定してください。");
            return "error";
        }

        LocalDate startOfMonth = LocalDate.of(LocalDate.now().getYear(), month, 1);
        LocalDateTime startOfMonthDateTime = startOfMonth.atStartOfDay();
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());
        LocalDateTime endOfMonthDateTime = endOfMonth.atTime(23, 59, 59, 999999999);

        List<Account> topLikedAccounts = likeService.findTopLikedAccountsForMonth(startOfMonthDateTime, endOfMonthDateTime);

        if (topLikedAccounts == null || topLikedAccounts.isEmpty()) {
            model.addAttribute("error", "指定した月のデータが見つかりませんでした。");
            return "error";
        }

        model.addAttribute("accounts", topLikedAccounts);
        model.addAttribute("month", month);

        return "public/ranking";
    }

    // 最新のランキングデータを取得する非同期エンドポイント
    @GetMapping("/latest")
    public ResponseEntity<List<Account>> getLatestRanking(@RequestParam(value = "month", defaultValue = "1") int month) {
        LocalDate startOfMonth = LocalDate.of(LocalDate.now().getYear(), month, 1);
        LocalDateTime startOfMonthDateTime = startOfMonth.atStartOfDay();
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());
        LocalDateTime endOfMonthDateTime = endOfMonth.atTime(23, 59, 59, 999999999);

        List<Account> topLikedAccounts = likeService.findTopLikedAccountsForMonth(startOfMonthDateTime, endOfMonthDateTime);
        return ResponseEntity.ok(topLikedAccounts);
    }
    
 // ランキング画面用の非同期いいね更新メソッド
    @PostMapping("/account/{id}/like")
    @ResponseBody
    public Map<String, Object> likeAccount(@PathVariable Long id) {
        Map<String, Object> response = new HashMap<>();
        try {
            int updatedLikes = likeService.likeAccount(id); // いいね数を更新し、新しい数値を取得
            response.put("likes", updatedLikes); // 更新後のいいね数を返す
        } catch (Exception e) {
            e.printStackTrace();
            response.put("error", "いいねの更新に失敗しました"); // エラーメッセージを返す
        }
        return response;
    }
}
